<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Journey of the Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ZarkBruce.github.io/"/>
  <updated>2019-09-20T14:06:39.593Z</updated>
  <id>https://ZarkBruce.github.io/</id>
  
  <author>
    <name>michaelbobo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线性表</title>
    <link href="https://ZarkBruce.github.io/2019/09/11/software/"/>
    <id>https://ZarkBruce.github.io/2019/09/11/software/</id>
    <published>2019-09-11T15:35:06.000Z</published>
    <updated>2019-09-20T14:06:39.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ul><li> 线性表是具有相同类型的n（n>=0）个元素的有限序列，其中n 为表长。当n=0时，该表为空表。 </li><li> 线性表是逻辑结构,表示元素之间相邻的关系，顺序表及链表为存储结构。</li><li>若L命名为线性表，则一般表示L=（a1,a2,.....ai,ai+1,...,an)</li></ul><h2 id="线性表的九种基本操作"><a href="#线性表的九种基本操作" class="headerlink" title="线性表的九种基本操作"></a>线性表的九种基本操作</h2><p>1.InitList(&amp;L):初始化表，构造一个空的线性表 <br><br>2.DestoryList(&amp;L):销毁操作，销毁线性表，并释放线性表所占用的内存空间<br><br>3.LocateElem(L,e):按值查找，在表L中查找给定关键字值e的元素，返回查找到的第一个元素<br><br>4.GetElem(L,i):按位查找，获取表第i个位置的元素<br><br>5.ListInsert(&amp;L,i,e):插入操作，在线性表L中的第i个位置上插入指定元素e(规定前插）<br><br>6.ListDelete(&amp;L,i,&amp;e):删除操作，删除表L中第i个位置的元素，并用e返回删除元素的值。<br><br>7.PrintList(L):输出操作，按前后顺序输出线性表的各个元素<br><br>8.Empty(L):判空操作，若L为空表则返回TRUE否则返回FALSE<br><br>9.Length(L):求表长返回线性表L的长度，即L中数据元素的个数。<br></p><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><ul><li>线性表的顺序存储又称顺序表</li><li>一组地址连续存放的存储单元依次存放线性表的各个元素，从而使逻辑上相邻的元素在物理位置上也保持相邻（逻辑顺序与物理顺序相同）</li><li>通常用数组来实现顺序表，它们之间存在很多不同点</li>1.数组的下标从0开始，线性表的下标从1开始。<br>2.数组的容量不可扩充，顺序表的容量可增加<br>3.数组可以是多维的，线性表只能是一维的<br><li>顺序表可实现随机存取（Loc(A)+sizeof(ElemType),Loc(A)+2*sizeof(ElemType)...)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//数组静态分配</span><br><span class="line">#define Maxsize 50</span><br><span class="line">typedef struct&#123;</span><br><span class="line">    ElemType data[Maxsize];//存放顺序表中元素的数组</span><br><span class="line">    int length;//顺序表的长度</span><br><span class="line">&#125;sqlist;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#define Maxsize 50</span><br><span class="line">typedef struct&#123;</span><br><span class="line">    ElemType *data;//指针表示顺序表的首地址，即第一个数据元素的地址</span><br><span class="line">    int length;//顺序表的长度</span><br><span class="line">    &#125;sqlist;</span><br><span class="line">    //动态分配语句</span><br><span class="line">    //L.data=(ElemType*)malloc(sizeof(ElemType)*Initsize)</span><br></pre></td></tr></table></figure><h2 id="顺序表的基本操作"><a href="#顺序表的基本操作" class="headerlink" title="顺序表的基本操作"></a>顺序表的基本操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//定义顺序表及其初始化操作</span><br><span class="line">#define MaxSize 100</span><br><span class="line">typedef struct&#123;</span><br><span class="line">    ElemType *data;</span><br><span class="line">    int length;   </span><br><span class="line">&#125;sqlist</span><br><span class="line"></span><br><span class="line">Status InitList(sqlist &amp;L)&#123;</span><br><span class="line">L.data=(ElemType*)malloc(sizeof(ElemType)*InitSize) ;</span><br><span class="line">if (L.data==NULL)</span><br><span class="line">exit(OVERFLOW); //存储分配失败</span><br><span class="line">L.length=0;   //空表的长度为0</span><br><span class="line">L.listsize=InitSize; //初始存储容量</span><br><span class="line">return OK;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//顺序表的插入操作</span><br><span class="line">ListInsert(sqlist &amp;L,int i,ElemType e)&#123;</span><br><span class="line">    //判断插入位置的合法性</span><br><span class="line">    if(i&lt;1||i&gt;=L.length+1) return ERROR;//顺序表的数据元素是连续的</span><br><span class="line">    if(L.length&gt;=Maxsize) return ERROR;</span><br><span class="line">    for (int j=L.length;j&gt;=i;j-- )</span><br><span class="line">    L.data[j]=L.data[j-1];</span><br><span class="line">    L.data[i-1]=e;</span><br><span class="line">    L.length++;//线性表的长度加一</span><br><span class="line">    return ok;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/顺序表的删除操作</span><br><span class="line">ListDelete(sqlist &amp;L,int i,ElemType &amp;e)&#123;</span><br><span class="line">    //判断删除位置的合法性</span><br><span class="line">  if(i&lt;1||i&gt;L.length) return ERROR;</span><br><span class="line">  e=L.data[i-1]//将删除的元素存放在引用变量e中</span><br><span class="line">  for(int j=i;j&lt;L.length;j++)</span><br><span class="line">  L.data[j-1]=L.data[j];</span><br><span class="line">  L.length--;//线性表的长度减一，清空了原顺序表的最后一个元素</span><br><span class="line">  return OK; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//顺序表的按值查找操作</span><br><span class="line">int LocateElem(sqlist L,ElemType e)&#123;</span><br><span class="line">  int i;</span><br><span class="line">  for (i=0;i&lt;L.length;i++)</span><br><span class="line">  if(L.data[i]==e)</span><br><span class="line">  return i+1;</span><br><span class="line"> else return 0;//查找失败  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><ul><li>线性表的链式存储又称为单链表</li><li>通过一组任意的存储单元来存储线性表中的数据元素</li><li>通过指针来实现线性逻辑关系</li><li>单链表不可以随机存取，只可以进行顺序存取</li><li>结点：数据域+指针域</li><li>头指针与头节点的区别</li>1.无论是否引入头节点，头指针所指向的一定是链表的第一个节点 <br>2. 头节点是带头节点链表的第一个节点，其数据域内通常不存储数据<br><li>引入头节点的原因</li>1.处理操作起来方便 例如：对在第一元素结点前插入结点和删除第一结点起操作与其它结点的操作就统一了<br>2.无论链表是否为空，其头指针是指向头结点的非空指针，因此空表和非空表的处理也就统一了<br></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  typedef struct LNode&#123;</span><br><span class="line">    ElemType data;</span><br><span class="line">    struct LNode *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//头插法建立单链表</span><br><span class="line">   LinkList List_HeadInsert(LinkList &amp;L)&#123;</span><br><span class="line">       LNode *s;int x;</span><br><span class="line">      L=(LinkList)malloc(sizeof(LNode));</span><br><span class="line">      L-&gt;NULL;</span><br><span class="line">      scanf(&quot;%d&quot;,&amp;x);</span><br><span class="line">      while(x!=9999)&#123;</span><br><span class="line">        s=(LNode*)malloc(sizeof(LNode)) ;</span><br><span class="line">        s-&gt;data=x;</span><br><span class="line">        s-&gt;next=L-&gt;next;</span><br><span class="line">        L-&gt;next=s;</span><br><span class="line">        scanf(%d,&amp;x);</span><br><span class="line">      &#125;</span><br><span class="line">      return  L;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt; 线性表是具有相同类型的n（n&gt;=0）个元素的有限序列，其中n 为表长。当n=0时，该表为空表。 &lt;/li&gt;
&lt;li&gt; 线性表是
      
    
    </summary>
    
      <category term="Data Structure" scheme="https://ZarkBruce.github.io/categories/Data-Structure/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ZarkBruce.github.io/2019/08/04/hello-world/"/>
    <id>https://ZarkBruce.github.io/2019/08/04/hello-world/</id>
    <published>2019-08-04T07:23:01.228Z</published>
    <updated>2019-09-11T15:50:11.609Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start-123"><a href="#Quick-Start-123" class="headerlink" title="Quick Start 123"></a>Quick Start 123</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p><font color="#DC143C">hello</font><br></p><ul><li><a href><font color="#DC143C">os</font></a></li><li>algorithm</li><li>computer architecture</li></ul>！[tip](/images/test.png)More info: [Deployment](https://hexo.io/docs/deployment.html)]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
